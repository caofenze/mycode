 var $ = require("buy:widget/ui/jquery/jquery.js"); // ================================================//  初始化页面入口// =================================================(function($) {    $.fn.sliderstart = function(optElems) {        new sliderContainer($(this), optElems);    }})(jQuery); // ================================================= //        定时器的处理 //    1.suspend : 暂停定时器 //    2.restart : 重置定时器 //    3.stop : 停止定时器 //    4.start : 开启定时器 // =================================================var ctrTimer = function (excuteTime, callback) {    // =======================================    //  参数：    //      @defalutinterval：默认执行时间增量    //      @aftermoveTimer：定时器名    //      @howLong：时间变化值    //      @paused：暂停标识符    //      @started：开始标识符    //      @excuteTime ：传入的时间值    //      @callback：回调函数    // =======================================    this.defalutinterval = 100;    this.aftermoveTimer = null;    this.howLong = 0;    this.paused = false;    this.started = false;    this.excuteTime = excuteTime;    this.callback = callback;};//开始定时器ctrTimer.prototype.begin = function() {    //开始后，设置暂停标识符为false，运动标识符为true    var _this = this;    this.howLong = 0;    this.paused = false;    this.started = true;    this.aftermoveTimer = setInterval(function() {         //增加到大于传入时间时，清空定时器，并且执行calback方法回调        _this.howLong += _this.defalutinterval;        if (_this.howLong > _this.excuteTime) {            clearInterval(_this.aftermoveTimer);            if (_this.callback){                _this.callback()            }        }    }, this.defalutinterval)};//暂停定时器// 用于处理鼠标移入图片区域暂停播放ctrTimer.prototype.suspend = function() {    if (this.started) {        //此时将暂停标示设置为true ，清空定时器        this.paused = true;        clearInterval(this.aftermoveTimer);    }};//重置定时器//鼠标移出后重新开始定时器ctrTimer.prototype.restart = function() {    var _this = this;    //同上，唯一不同的是 此处if    if (this.started && this.paused) {        this.paused = false;        this.aftermoveTimer = setInterval(function() {            _this.howLong += _this.defalutinterval;            if (_this.howLong > _this.excuteTime) {                clearInterval(_this.aftermoveTimer);                if (_this.callback){                    _this.callback();                }            }        }, this.defalutinterval)    }};//停止定时器ctrTimer.prototype.stop = function() {    //清空定时器，设置开关值都为false    clearInterval(this.aftermoveTimer);    this.howLong = 0;    this.paused = false;    this.started = false};// ====================================================//  构造函数入口//  @   TARGET_SRC : 图片的src地址标示符//  @   TARGET_LINK : 图片点击跳转链接标示符//  @   container : 整体容器//  @   optElems : 传入内部容器参数值//  @   moveTimeout:缓动定时器//  @   imgInfoArray:存图片信息数组// ====================================================var sliderContainer = function(wrapper, optElems) {    this.TARGET_SRC = 1;    this.TARGET_LINK = 2;    this.wrapperContainer = wrapper;    this.opt = optElems;    this.moveTimeout = null;          this.imgInfoArray = [];    //初始化图片信息，存为imgInfo存储一些相关图片信息    //初始化页面入口    this.initInfo();    this.init();};sliderContainer.prototype = {    /*图片元素属性操作*/    // this.imgInfoArray 存储图片的几项常用信息    initInfo: function() {                var _this = this;        this.wrapperContainer.find(".slidercontainer-slides li").each(function() {                        var img = $("img", $(this));                        if (img.length > 0) {                // =================================                // 操作每张图片对应的信息                //  分别包括：                //  @    src : img的连接地址                //  @    title : alt信息                 //  @    description : 描述信息                //  @    link ：点击跳转连接                     // ==================================                var img_src = img.attr("src") && img.attr("src").length > 0 ? img.attr("src") : "",                    img_title = img.attr("alt") && img.attr("alt").length > 0 ? img.attr("alt") : "",                    img_description = img.attr("description") && img.attr("description").length > 0 ? img.attr("description") : "",                    img_link = img.parent() && img.parent().is("a") ? img.parent().attr("href") : "",                    arr = [];                var elem = new Array(_this.imgInfoArray.length, img_src, img_link,img_title, img_description, arr, "");                                _this.imgInfoArray.push(elem);            }        });    },    // ==============================    // 初始化入口    //  1.渲染页面    //  2.执行init方法进入    // ==============================    init: function() {        if (this.imgInfoArray.length <= 0){            return;        }        // ======================================        // @ isAnimating：执行动画的标示符        // @ isSuspend：停止标示符        // @ tempPaused：暂停标示符        // @ currentItem: 当前项标示符        // @ prevItem: 之前一项标示符        // @ nextItem: 下一项标示符        // ======================================         this.currentItem = -1;        this.prevItem = -1;        this.nextItem = -1;        this.isAnimating = false;        this.isSuspend = !this.opt.autoplay;        this.tempPaused = false;        this.firstslide = true;        // =======================================        // 创建slide整体框架和样式        //      样式        //      圆点        //      箭头        //      底部的阴影        //      文字信息        // =======================================        this.createContainer();   //创建整体框架        this.buildStyle();       //创建样式        this.buildNav();     //创建圆点        this.buildTimeout();  //定时器开关        this.startSlide(0); //加载时页面展示的第几张图片    },    /***      *   展现区域的HTML结构    *   渲染整体页面框架    **/    createContainer: function() {        var wrapCon = "<div class='slidercontainer-wrapper'>"                           + "<div class='slidercontainer-slider'>"                             + "<div class='slidercontainer-box'>"                                 + "<div class='slidercontainer-swipe-box'>"                                     + "<div class='slidercontainer-space'></div>"                                     + "<div class='slidercontainer-img-box'></div>"                                 + "</div>"                             + "</div>"                             + "<div class='slidercontainer-text-wrapper'></div>"                             + "<div class='slidercontainer-arrow-left'></div>"                             + "<div class='slidercontainer-arrow-right'></div>"                          + "</div>"                          + "<div class='slidercontainer-nav'>"                            +"<div class='slidercontainer-nav-container'>"                                +"<div class='slidercontainer-bullet-wrapper'></div>"                            +"</div>"                        +"</div>"                      + "</div>";        this.wraperContainer = $(wrapCon);                this.wraperContainer.appendTo(this.wrapperContainer);    },    /*创建整体样式*/    buildStyle: function() {                //设置图片总容器的宽高        $(".slidercontainer-space", this.wrapperContainer).css({            width: this.opt.width,            height: this.opt.height        });        //设置最外层容器宽高        this.wrapperContainer.css({            "width": this.opt.width,            "height": this.opt.height        });    },    /*定时器规则*/    buildTimeout: function() {        var _this = this;        //开启定时器        this.sliderTimeout = new ctrTimer(this.opt.slideinterval,             function() {                _this.startSlide(-1);            }       );        //如果参数值传入了移动到图片上暂停选项，则出发暂停操作        if (this.opt.pauseonmouseover){            $(".slidercontainer-slider", this.wrapperContainer).hover(function() {                if (!_this.isSuspend){                   _this.sliderTimeout.suspend();                }                                }, function() {                if (!_this.isSuspend){                    _this.sliderTimeout.restart();                }                                });        };    },    /*创建圆点容器*/    buildNav: function() {        var _this = this;        var i;        var navplaceContainer = $(".slidercontainer-nav-container", this.wrapperContainer);        var cuteDotWrapper = $(".slidercontainer-bullet-wrapper", this.wrapperContainer);               navplaceContainer.append(cuteDotWrapper);                //创建容器内的小圆点        var cuteDot;        for (i = 0; i < this.imgInfoArray.length; i++) {            cuteDot = this.buildNavBullet(i);            cuteDotWrapper.append(cuteDot)        }        //执行操作圆点的扩展方法        this.dotHandle();        this.wrapperContainer.on("slidercontainer.switch", function(event, prev, cur) {            $(".slidercontainer-bullet-" + prev, _this.wrapperContainer).dotNormal();            $(".slidercontainer-bullet-" + cur, _this.wrapperContainer).dotSelected();        });    },    dotHandle:function(){        //分别扩展        //   1.dotNormal => 正常时圆点显示图片        //   2.dotHightlight => 鼠标滑过时显示图片        //   3.dotSelected => 选中时显示图片                $.fn.dotNormal = function() {            $(this).css({"background": "white"});        };        $.fn.dotHighlight  = function() {            $(this).css({"background": "#9fcffe"});        };        $.fn.dotSelected = function() {            $(this).css({"background": "#63b1fe"});        }    },    /*圆点的hover,click操作*/    buildNavBullet: function(index) {        var _this = this;        cuteDot = $("<div class='slidercontainer-cutedot slidercontainer-bullet-" + index + "'></div>");                cuteDot.data("index", index);        //对圆点进行点击，hover，click的操作        cuteDot.on("mouseenter",            function(){                var dotIndex = $(this).data("index");                if (dotIndex != _this.currentItem){                    $(this).dotHighlight();                }                if (_this.opt.navswitchonmouseover){                    if (dotIndex != _this.currentItem){                        _this.startSlide(dotIndex);                    }                 }            }        ).on("mouseleave",            function(){                if ($(this).data("index") != _this.currentItem){                    $(this).dotNormal();                }             }        ).on("click",            function(){                _this.startSlide($(this).data("index"))            }        );        return cuteDot;    },    /*控制播放相关，自动播放、播放第几张*/    startSlide: function(index) {        // 开启定时器后执行        var _this = this;        // 图片的顺序操作，依次执行下一张        this.handleIndex(index);        //定时器的相关操作以及执行图片的展示        this.handleTimer(index);            },    /*定时器相关标示符操作*/    handleTimer:function(index){        var _this = this;        //如果下一张图片渲染完毕, 清空定时器        //imgbox执行moveDone方法        //插入图片        if (this.isAnimating) {            if (this.moveTimeout){                clearTimeout(this.moveTimeout);            };            $(".slidercontainer-img-box", this.wrapperContainer)            .off("moveDone")            .html("<div class='slidercontainer-img'><img class='img-detail' src='" + this.imgInfoArray[lastItem][_this.TARGET_SRC] + "' /></div>");                        this.isAnimating = false;        }        // 停止定时器        this.sliderTimeout.stop();        // 暂停设置为false        this.tempPaused = false;        // 执行switch方法，当前项和上一项的小圆点显示        this.wrapperContainer.trigger("slidercontainer.switch", [lastItem, this.currentItem]);                // 设置一个滑动方向的标示符        // 正常播放时或者强制执行点击操作时，设置为true，如果强制操作点击反方向项，设置为false        var slideDirection = true;                if (index == -1){            slideDirection = true;        }else if (index >= 0){            slideDirection = this.currentItem > lastItem ? true : false;        }        // 执行开始播放操作        if (!this.isSuspend && !this.tempPaused && this.imgInfoArray.length > 1){            this.sliderTimeout.begin()        }        // 执行showImg方法        this.displayImage(slideDirection);    },    /*图片展示策略*/    displayImage: function(slideDirection) {        var _this = this;        var imgLoader = new Image();                $(imgLoader).load(function() {            var ratio = 100;            var imgDetail= "<div class='slidercontainer-img'><a href='"                      +_this.imgInfoArray[_this.currentItem][_this.TARGET_LINK]                      + "' target='_blank'><img style='position:absolute;"                       + "max-width:"                       + ratio                       + "%;width:100%;height:100%;left:"                       + (100 - ratio) / 2 + "%;top:0%;' src='"                       + _this.imgInfoArray[_this.currentItem][_this.TARGET_SRC]                       + "' /></a></div>";            var imgBox = $(".slidercontainer-img-box", _this.wrapperContainer);            var prevImg = $(".slidercontainer-img", _this.wrapperContainer);            var curImg = $(imgDetail);            //播放下一个            if (prevImg.length > 0){                prevImg.before(curImg);            }else{                imgBox.append(curImg);            }            //滑动的方式，第一次为不执行            var transitioneffect = _this.firstslide ? "" : _this.opt.transition;            //第一次加载完毕后，标示符设置为false，即执行滑动操作            _this.firstslide = false;                        //执行动画标示符设置为true            _this.isAnimating = true;            //初始化slider控件            //定义多种缓动方法            imgBox.slidercontainerMove(                prevImg,                 curImg,                 {                    effect: transitioneffect,                    direction: slideDirection,                    leftrightdirection : _this.opt.directionnomalslip,                    topdowndirection: _this.opt.directiontopdown,                    duration: _this.opt.transitionduration,                    easing: _this.opt.transitioneasing,                    slowshade: _this.opt.slowshade,                    shade: _this.opt.shade,                    nomalslip: _this.opt.nomalslip,                    topdownnomalslip: _this.opt.topdownnomalslip,                    topdownslice: _this.opt.topdownslice,                    leftrightslice: _this.opt.leftrightslice,                },                 function() {                    _this.isAnimating = false                },                 function(timeoutid) {                    _this.moveTimeout = timeoutid                }            );        });        imgLoader.src = this.imgInfoArray[this.currentItem][this.TARGET_SRC];    },    // =================================================================    //  @ 执行加载第几张图片的策略    //  @ 1.如果index == -1 ：正常切换，播放值增加1，如果增加大于长度后，将其置为0    //  @ 2.如果index >= 0 ： 加载时载入第几张图片    // ==================================================================    handleIndex: function(index) {                lastItem = this.currentItem;                if (index == -1) {            this.prevItem = this.currentItem;            this.currentItem = this.nextItem;            // 设置nextItem下一张播放的图片递增1，如果越过边界，则直接将下一张设置为第一张            this.nextItem = this.currentItem + 1 >= this.imgInfoArray.length ? 0 : this.currentItem + 1;        } else if (index >= 0) {            this.currentItem = index;            this.prevItem = this.currentItem - 1 < 0 ? this.imgInfoArray.length - 1 : this.currentItem - 1;            this.nextItem = this.currentItem + 1 >= this.imgInfoArray.length ? 0 : this.currentItem + 1;        }        // 最后一项如果等于当前项，return        if (lastItem == this.currentItem){            return;        }    }};// ====================================================//  动画效果处理部分// ====================================================$.fn.slidercontainerMove = function(prevItem, nextItem, transition, callback, moveCallBack) {    // ========================================    //  滑动传参：    //  @effects : 滑动效果    //  @duration ： 持续时间    //  @easing ：效果值    //  @direction ： 方向    //  @初始时effect值为空    // =========================================    var _this = this,        effects = transition.effect,        duration = transition.duration,        easing = transition.easing,        direction = transition.direction,        effect = null,        leftrightdirection = transition.leftrightdirection,        topdowndirection = transition.topdowndirection;    //设置支持多种滑动效果    //采用split切割传入参数,随机选取    if (effects) {        effects = effects.split(",");        effect = effects[Math.floor(Math.random() * effects.length)];        effect = $.trim(effect.toLowerCase());    };    //设置时间和滑动的效果    if (effect && transition[effect]) {        if (transition[effect].duration){            duration = transition[effect].duration;        }        if (transition[effect].easing){            easing = transition[effect].easing        }       };    function hiddenLayout(how){        if(how == "hidden"){            _this.css({overflow: "hidden"});        }else{            _this.css({overflow: "visible"});        }      }    ////// 渐变    // =============================================    //  直接调用jQuery fadeOut方法    //  下一项显示出来，前一项隐藏    //  完毕后执行callbak方法 ：     //      isAnimating = false     //      滑动完毕，关闭开关    //      callback方法为防止点击太快上一个还没走完    // =============================================    if (effect == "shade") {        //new image的容器插入下一张图片，前一张图片逐渐退去，完毕后将其remove                hiddenLayout("hidden");        nextItem.show();                prevItem.fadeOut(duration, easing, function() {            prevItem.remove();            callback();        })    }     //////环绕渐变    // ============================    //  同上操作 jQuery fadeOut    //  不同的是处理fadeOut中的参数    // ============================    else if (effect == "slowshade") {        //变化是在执行时间的分两半，一半前一张退去，同时另一半渐显        hiddenLayout("hidden");        nextItem.show();                prevItem.fadeOut(duration / 2, easing, function() {            nextItem.fadeIn(duration / 2, easing, function() {                prevItem.remove();                callback();            })        })    }     //////左右滑动    // ===============================    // 下一个滑动过来 ： 根据direction    // 前一个滑走    //  callback    // ===============================    else if (effect == "nomalslip") {        hiddenLayout("hidden");        if (leftrightdirection) {                        nextItem.css({left: "100%"});            nextItem.animate({left: "0%"}, duration, easing);            prevItem.animate({left: "-100%"}, duration, easing, function() {                prevItem.remove();                callback()            })        } else {            nextItem.css({left: "-100%"});            nextItem.animate({left: "0%"}, duration, easing);            prevItem.animate({left: "100%"}, duration, easing, function() {                prevItem.remove();                callback()            })        }    }     else if (effect == "topdownnomalslip") {        hiddenLayout("hidden");        if (topdowndirection) {                        nextItem.css({top: "100%"});            nextItem.animate({top: "0%"}, duration, easing);            prevItem.animate({top: "-100%"}, duration, easing, function() {                prevItem.remove();                callback()            })        } else {            nextItem.css({top: "-100%"});            nextItem.animate({top: "0%"}, duration, easing);            prevItem.animate({top: "100%"}, duration, easing, function() {                prevItem.remove();                callback()            })        }    }    // 上下切片    // updownMove()    else if (effect == "topdownslice") {        hiddenLayout("hidden");        _this.updownMove(            prevItem,             nextItem,             $.extend({                duration: duration,                easing: easing,                direction: direction            },            transition["topdownslice"]),            callback,             moveCallBack        )    }     // 左右切片    // leftrightMove()    else if (effect == "leftrightslice") {        hiddenLayout("hidden");        _this.leftrightMove(            prevItem,             nextItem,             $.extend({                duration: duration,                easing: easing,                direction: direction            },             transition["leftrightslice"]),             callback,             moveCallBack        )    }     //不做任何处理    else {        nextItem.show();        prevItem.remove();        callback()    }};//上下切片$.fn.updownMove = function(prevItem, nextItem, optElems, callback, moveCallBack) {        var i,        index,        _this = this,        width = _this.width(),        sliceWidth = Math.ceil(width / optElems.slicecount),        sliceTpl,        sliceCon,        imgItem;    //进入页面后，下一张（整张图片是隐藏状态，可以是切片明显看到）    nextItem.hide();    //slice切片模板    // ===================================    //  切割策略：    //      将一张图片切割成若干张小图    //      渲染过程中一张一张的插入到图片区域    //      @例子：    //         若图片为宽度为600，切割成100份，每份宽度为6，第一个小图开始运动，height逐渐增加    //          100% ， 然后第二张开始运动 ，一次类推。    // ====================================    for (i = 0; i < optElems.slicecount; i++) {        sliceTpl = "<div class='slidercontainer-img-slice"                     + " ' style='display:block;position:absolute;left:" + i * sliceWidth                      + "px;top:0%;width:" + sliceWidth                      + "px;height:100%;overflow:hidden;'></div>";        sliceCon = $(sliceTpl);        //克隆出每一张小图片，让其只显示比例中的对应部分        imgItem = $("img", nextItem).clone().css({            "max-width": "",            left: "-" + sliceWidth * i + "px",            width: optElems.slicecount * 100 + "%"        });        imgItem.attr("style", imgItem.attr("style") + "; " + "max-width:" + width + "px !important;");        sliceCon.append(imgItem);        _this.append(sliceCon)    };    var slices = $(".slidercontainer-img-slice", _this);        //定义滑动方向的数组    var effects = optElems.effects.split(",");  //滑动值，数组    var effect = effects[Math.floor(Math.random() * effects.length)];  // 随机选取滑动效果    effect = $.trim(effect.toLowerCase());    //自定义函数moveDown完成滑动后的执行操作    // ====================================    //  1.解绑moveDone函数    //  2.移出掉前一个图片    //  3.显示下一张图片    //  4.切片滑动完毕都加载到页面后也同时将其移出    //  5.执行callback方法，结束定时器    // =====================================    _this.on("moveDone", function() {        _this.off("moveDone");        prevItem.remove();        nextItem.show();        slices.remove();        callback();    });    //设置滑动时间规则    var duration = optElems.duration / 2;    var interval = optElems.duration / 2 / optElems.slicecount;    index = 0;    // 滑动的规则：up，down，updown ： 分别为上下的三种可能    // index++ 滑动一次index加1，然后对2取模，可以筛选出一半    // 循环整个切片内容，选取滑动方向，高度执行到100%    slices.each(function() {        var _this = $(this);        switch (effect) {            case "up":                _this.css({top: "",bottom: "0%",height: "0%"});                break;            case "down":                _this.css({top: "0%",height: "0%"});                break;            case "updown":                if (index % 2 == 0){                    _this.css({top: "0%",height: "0%"});                }else{                    _this.css({top: "",bottom: "0%",height: "0%"});                }                 break;        }        setTimeout(function() {            _this.animate({height: "100%"}, duration, optElems.easing)        }, interval * index);        index++    });    // 滑动完毕后触发 moveDone方法    var moveTimeout = setTimeout(function() {        _this.trigger("moveDone")    }, optElems.duration);    moveCallBack(moveTimeout)};//左右切片$.fn.leftrightMove = function(prevItem, nextItem, optElems, callback, moveCallBack) {    var i, index,        _this = this,        width = _this.width(),        sliceWidth = Math.ceil(width / optElems.slicecount),        leftrightTpl,imgTpl,sliceConWrapper,sliceCon,imgItem;    //页面加载，隐藏下一项        nextItem.hide();    for (i = 0; i < optElems.slicecount; i++) {        leftrightTpl = "<div class='slidercontainer-slice-left-right"                             + " ' style='display:block;position:absolute;left:"                             + i * sliceWidth + "px;top:0%;width:"                             + sliceWidth + "px;height:100%;overflow:hidden;'></div>";        imgTpl = "<div class='slidercontainer-img-slice"                   + " ' style='display:block;position:absolute;left:0%;top:0%;width:100%;height:100%;overflow:hidden;'></div>"                 sliceConWrapper = $(leftrightTpl);        sliceCon = $(imgTpl);        imgItem = $("img", nextItem).clone().css({                "max-width": "",                left: "-" + sliceWidth * i + "px",                width: optElems.slicecount * 100 + "%"            });        imgItem.attr("style", imgItem.attr("style") + "; " + "max-width:" + width + "px !important;");        sliceCon.append(imgItem);        sliceConWrapper.append(sliceCon);        _this.append(sliceConWrapper)    }    var slices = $(".slidercontainer-img-slice", _this);    _this.off("moveDone").on("moveDone", function() {        _this.off("moveDone");        prevItem.remove();        nextItem.show();        $(".slidercontainer-slice-left-right", _this).remove();        callback();    });    index = 0;    //判断向左还是向右切片    slices.each(function() {        var slice = $(this);        var target;        //缓动left值到目标点位        if (!optElems.direction) {            slice.css({left: "-100%"});            target = {left: "0%"}        } else {            slice.css({left: "",right: "-100%"});            target = {right: "0%"}        };        slice.animate(target, optElems.duration * (index + 1) / optElems.slicecount, optElems.easing);        index++    });    var moveTimeout = setTimeout(function() {        _this.trigger("moveDone")    }, optElems.duration);    moveCallBack(moveTimeout)};